{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrei Gabor\\\\Desktop\\\\UNI\\\\3rd YEAR\\\\Mobile\\\\Labs\\\\cars-app\\\\src\\\\auth\\\\AuthProvider.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { getLogger } from '../core';\nimport { login as loginApi } from './authApi';\nimport { Plugins } from \"@capacitor/core\";\nconst log = getLogger('AuthProvider');\nconst {\n  Storage\n} = Plugins;\nconst initialState = {\n  isAuthenticated: false,\n  isAuthenticating: false,\n  authenticationError: null,\n  pendingAuthentication: false,\n  token: \"\"\n};\nexport const AuthContext = React.createContext(initialState);\nexport const AuthProvider = ({\n  children\n}) => {\n  const [state, setState] = useState(initialState);\n  const {\n    isAuthenticated,\n    isAuthenticating,\n    authenticationError,\n    pendingAuthentication,\n    token\n  } = state;\n  const login = useCallback(loginCallback, []);\n  const logout = useCallback(logoutCallback, []);\n  useEffect(authenticationEffect, [pendingAuthentication]);\n  const value = {\n    isAuthenticated,\n    login,\n    logout,\n    isAuthenticating,\n    authenticationError,\n    token\n  };\n  log('render');\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, children);\n\n  function loginCallback(username, password) {\n    log('login');\n    setState({ ...state,\n      pendingAuthentication: true,\n      username,\n      password\n    });\n  }\n\n  function logoutCallback() {\n    log('logout');\n    setState({ ...state,\n      token: '',\n      isAuthenticated: false\n    });\n\n    (async () => await Storage.clear())();\n  }\n\n  function authenticationEffect() {\n    let canceled = false;\n\n    try {\n      authenticate();\n    } catch (error) {\n      console.log(error);\n    }\n\n    return () => {\n      canceled = true;\n    };\n\n    async function authenticate() {\n      var token = await Storage.get({\n        key: \"token\"\n      });\n\n      if (token.value !== null) {\n        setState({ ...state,\n          token: token.value,\n          pendingAuthentication: false,\n          isAuthenticated: true,\n          isAuthenticating: false\n        });\n      }\n\n      if (!pendingAuthentication) {\n        log('authenticate, !pendingAuthentication, return');\n        return;\n      }\n\n      try {\n        log('authenticate...');\n        setState({ ...state,\n          isAuthenticating: true\n        });\n        const {\n          username,\n          password\n        } = state;\n        const {\n          token\n        } = await loginApi(username, password);\n\n        if (canceled) {\n          return;\n        }\n\n        log('authenticate succeeded');\n        await Storage.set({\n          key: \"token\",\n          value: token\n        });\n        setState({ ...state,\n          token,\n          pendingAuthentication: false,\n          isAuthenticated: true,\n          isAuthenticating: false\n        });\n      } catch (error) {\n        if (canceled) {\n          return;\n        }\n\n        log('authenticate failed');\n        setState({ ...state,\n          authenticationError: error,\n          pendingAuthentication: false,\n          isAuthenticating: false\n        });\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Andrei Gabor/Desktop/UNI/3rd YEAR/Mobile/Labs/cars-app/src/auth/AuthProvider.tsx"],"names":["React","useCallback","useEffect","useState","getLogger","login","loginApi","Plugins","log","Storage","initialState","isAuthenticated","isAuthenticating","authenticationError","pendingAuthentication","token","AuthContext","createContext","AuthProvider","children","state","setState","loginCallback","logout","logoutCallback","authenticationEffect","value","username","password","clear","canceled","authenticate","error","console","get","key","set"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getLogger } from '../core';\r\nimport { login as loginApi } from './authApi';\r\nimport { Plugins } from \"@capacitor/core\";\r\n\r\nconst log = getLogger('AuthProvider');\r\nconst { Storage } = Plugins;\r\n\r\ntype LoginFn = (username?: string, password?: string) => void;\r\ntype LogoutFn = () => void;\r\n\r\nexport interface AuthState {\r\n  authenticationError: Error | null;\r\n  isAuthenticated: boolean;\r\n  isAuthenticating: boolean;\r\n  login?: LoginFn;\r\n  logout?: LogoutFn;\r\n  pendingAuthentication?: boolean;\r\n  username?: string;\r\n  password?: string;\r\n  token: string;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  isAuthenticated: false,\r\n  isAuthenticating: false,\r\n  authenticationError: null,\r\n  pendingAuthentication: false,\r\n  token: \"\",\r\n};\r\n\r\nexport const AuthContext = React.createContext<AuthState>(initialState);\r\n\r\ninterface AuthProviderProps {\r\n  children: PropTypes.ReactNodeLike,\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [state, setState] = useState<AuthState>(initialState);\r\n  const { isAuthenticated, isAuthenticating, authenticationError, pendingAuthentication, token } = state;\r\n\r\n  const login = useCallback<LoginFn>(loginCallback, []);\r\n  const logout = useCallback<LogoutFn>(logoutCallback, []);\r\n  useEffect(authenticationEffect, [pendingAuthentication]);\r\n\r\n  const value = { isAuthenticated, login, logout, isAuthenticating, authenticationError, token };\r\n  log('render');\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n\r\n  function loginCallback(username?: string, password?: string): void {\r\n    log('login');\r\n    setState({\r\n      ...state,\r\n      pendingAuthentication: true,\r\n      username,\r\n      password\r\n    });\r\n  }\r\n\r\n  function logoutCallback() {\r\n    log('logout');\r\n    setState({\r\n      ...state, \r\n      token: '',\r\n      isAuthenticated: false\r\n    });\r\n    (async () => await Storage.clear())();\r\n  }\r\n\r\n  function authenticationEffect() {\r\n    let canceled = false;\r\n    try {\r\n      authenticate();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    \r\n    return () => {\r\n      canceled = true;\r\n    }\r\n\r\n    async function authenticate() {\r\n        var token = await Storage.get({key : \"token\"});\r\n        if (token.value !== null) {\r\n          setState({...state, token: token.value, pendingAuthentication: false, isAuthenticated: true, isAuthenticating: false});\r\n        }\r\n        if (!pendingAuthentication) {\r\n          log('authenticate, !pendingAuthentication, return');\r\n          return;\r\n        }\r\n      try {\r\n        log('authenticate...');\r\n        setState({\r\n          ...state,\r\n          isAuthenticating: true,\r\n        });\r\n        const { username, password } = state;\r\n        const { token } = await loginApi(username, password);\r\n        if (canceled) {\r\n          return;\r\n        }\r\n        log('authenticate succeeded');\r\n        await Storage.set( {key: \"token\", value: token });\r\n        setState({\r\n          ...state,\r\n          token,\r\n          pendingAuthentication: false,\r\n          isAuthenticated: true,\r\n          isAuthenticating: false,\r\n        });\r\n      } catch (error) {\r\n        if (canceled) {\r\n          return;\r\n        }\r\n        log('authenticate failed');\r\n        setState({\r\n          ...state,\r\n          authenticationError: error,\r\n          pendingAuthentication: false,\r\n          isAuthenticating: false,\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}