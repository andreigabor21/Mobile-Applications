{"ast":null,"code":"import axios from 'axios';\nimport { getLogger } from '../core';\nconst log = getLogger('stockApi');\nconst baseUrl = 'localhost:3000';\nconst stockUrl = `http://${baseUrl}/stock`;\n\nfunction withLogs(promise, fnName) {\n  log(`${fnName} - started`);\n  return promise.then(res => {\n    log(`${fnName} - succeeded`);\n    return Promise.resolve(res.data);\n  }).catch(err => {\n    log(`${fnName} - failed`);\n    return Promise.reject(err);\n  });\n}\n\nconst config = {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\nexport const getStocks = () => {\n  return withLogs(axios.get(stockUrl, config), 'getStocks');\n};\nexport const createStock = stock => {\n  return withLogs(axios.post(stockUrl, stock, config), 'createStock');\n};\nexport const updateStock = stock => {\n  return withLogs(axios.put(`${stockUrl}/${stock.id}`, stock, config), 'updateStock');\n};\nexport const newWebSocket = onMessage => {\n  const ws = new WebSocket(`ws://${baseUrl}`);\n\n  ws.onopen = () => {\n    log('web socket onopen');\n  };\n\n  ws.onclose = () => {\n    log('web socket onclose');\n  };\n\n  ws.onerror = error => {\n    log('web socket onerror', error);\n  };\n\n  ws.onmessage = messageEvent => {\n    log('web socket onmessage');\n    onMessage(JSON.parse(messageEvent.data));\n  };\n\n  return () => {\n    ws.close();\n  };\n};","map":{"version":3,"sources":["C:/Users/Andrei Gabor/Desktop/UNI/3rd YEAR/Mobile/filip/stocks-app/src/todo/StockApi.tsx"],"names":["axios","getLogger","log","baseUrl","stockUrl","withLogs","promise","fnName","then","res","Promise","resolve","data","catch","err","reject","config","headers","getStocks","get","createStock","stock","post","updateStock","put","id","newWebSocket","onMessage","ws","WebSocket","onopen","onclose","onerror","error","onmessage","messageEvent","JSON","parse","close"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,SAA1B;AAGA,MAAMC,GAAG,GAAGD,SAAS,CAAC,UAAD,CAArB;AAEA,MAAME,OAAO,GAAG,gBAAhB;AACA,MAAMC,QAAQ,GAAI,UAASD,OAAQ,QAAnC;;AAMA,SAASE,QAAT,CAAqBC,OAArB,EAAyDC,MAAzD,EAAqF;AACnFL,EAAAA,GAAG,CAAE,GAAEK,MAAO,YAAX,CAAH;AACA,SAAOD,OAAO,CACXE,IADI,CACCC,GAAG,IAAI;AACXP,IAAAA,GAAG,CAAE,GAAEK,MAAO,cAAX,CAAH;AACA,WAAOG,OAAO,CAACC,OAAR,CAAgBF,GAAG,CAACG,IAApB,CAAP;AACD,GAJI,EAKJC,KALI,CAKEC,GAAG,IAAI;AACZZ,IAAAA,GAAG,CAAE,GAAEK,MAAO,WAAX,CAAH;AACA,WAAOG,OAAO,CAACK,MAAR,CAAeD,GAAf,CAAP;AACD,GARI,CAAP;AASD;;AAED,MAAME,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AADI,CAAf;AAMA,OAAO,MAAMC,SAAsC,GAAG,MAAM;AAC1D,SAAOb,QAAQ,CAACL,KAAK,CAACmB,GAAN,CAAUf,QAAV,EAAoBY,MAApB,CAAD,EAA8B,WAA9B,CAAf;AACD,CAFM;AAIP,OAAO,MAAMI,WAAyD,GAAGC,KAAK,IAAI;AAChF,SAAOhB,QAAQ,CAACL,KAAK,CAACsB,IAAN,CAAWlB,QAAX,EAAqBiB,KAArB,EAA4BL,MAA5B,CAAD,EAAsC,aAAtC,CAAf;AACD,CAFM;AAIP,OAAO,MAAMO,WAAyD,GAAGF,KAAK,IAAI;AAChF,SAAOhB,QAAQ,CAACL,KAAK,CAACwB,GAAN,CAAW,GAAEpB,QAAS,IAAGiB,KAAK,CAACI,EAAG,EAAlC,EAAqCJ,KAArC,EAA4CL,MAA5C,CAAD,EAAsD,aAAtD,CAAf;AACD,CAFM;AAWP,OAAO,MAAMU,YAAY,GAAIC,SAAD,IAA4C;AACtE,QAAMC,EAAE,GAAG,IAAIC,SAAJ,CAAe,QAAO1B,OAAQ,EAA9B,CAAX;;AACAyB,EAAAA,EAAE,CAACE,MAAH,GAAY,MAAM;AAChB5B,IAAAA,GAAG,CAAC,mBAAD,CAAH;AACD,GAFD;;AAGA0B,EAAAA,EAAE,CAACG,OAAH,GAAa,MAAM;AACjB7B,IAAAA,GAAG,CAAC,oBAAD,CAAH;AACD,GAFD;;AAGA0B,EAAAA,EAAE,CAACI,OAAH,GAAaC,KAAK,IAAI;AACpB/B,IAAAA,GAAG,CAAC,oBAAD,EAAuB+B,KAAvB,CAAH;AACD,GAFD;;AAGAL,EAAAA,EAAE,CAACM,SAAH,GAAeC,YAAY,IAAI;AAC7BjC,IAAAA,GAAG,CAAC,sBAAD,CAAH;AACAyB,IAAAA,SAAS,CAACS,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACvB,IAAxB,CAAD,CAAT;AACD,GAHD;;AAIA,SAAO,MAAM;AACXgB,IAAAA,EAAE,CAACU,KAAH;AACD,GAFD;AAGD,CAlBM","sourcesContent":["import axios from 'axios';\nimport { getLogger } from '../core';\nimport { StockProps } from './StockProps';\n\nconst log = getLogger('stockApi');\n\nconst baseUrl = 'localhost:3000';\nconst stockUrl = `http://${baseUrl}/stock`;\n\ninterface ResponseProps<T> {\n  data: T;\n}\n\nfunction withLogs<T>(promise: Promise<ResponseProps<T>>, fnName: string): Promise<T> {\n  log(`${fnName} - started`);\n  return promise\n    .then(res => {\n      log(`${fnName} - succeeded`);\n      return Promise.resolve(res.data);\n    })\n    .catch(err => {\n      log(`${fnName} - failed`);\n      return Promise.reject(err);\n    });\n}\n\nconst config = {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nexport const getStocks: () => Promise<StockProps[]> = () => {\n  return withLogs(axios.get(stockUrl, config), 'getStocks');\n}\n\nexport const createStock: (stock: StockProps) => Promise<StockProps[]> = stock => {\n  return withLogs(axios.post(stockUrl, stock, config), 'createStock');\n}\n\nexport const updateStock: (stock: StockProps) => Promise<StockProps[]> = stock => {\n  return withLogs(axios.put(`${stockUrl}/${stock.id}`, stock, config), 'updateStock');\n}\n\ninterface MessageData {\n  event: string;\n  payload: {\n      stock: StockProps;\n  };\n}\n\nexport const newWebSocket = (onMessage: (data: MessageData) => void) => {\n  const ws = new WebSocket(`ws://${baseUrl}`)\n  ws.onopen = () => {\n    log('web socket onopen');\n  };\n  ws.onclose = () => {\n    log('web socket onclose');\n  };\n  ws.onerror = error => {\n    log('web socket onerror', error);\n  };\n  ws.onmessage = messageEvent => {\n    log('web socket onmessage');\n    onMessage(JSON.parse(messageEvent.data));\n  };\n  return () => {\n    ws.close();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}