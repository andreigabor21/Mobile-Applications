{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrei Gabor\\\\Desktop\\\\UNI\\\\3rd YEAR\\\\Mobile\\\\Labs\\\\cars-app\\\\src\\\\cars\\\\CarProvider.tsx\";\nimport React, { useCallback, useEffect, useReducer } from 'react';\nimport { getLogger } from '../core';\nimport { createCar, getCars, newWebSocket, updateCar } from './CarApi';\nconst log = getLogger('CarProvider');\nconst initialState = {\n  fetching: false,\n  saving: false\n};\nconst FETCH_CARS_STARTED = 'FETCH_CARS_STARTED';\nconst FETCH_CARS_SUCCEEDED = 'FETCH_CARS_SUCCEEDED';\nconst FETCH_CARS_FAILED = 'FETCH_CARS_FAILED';\nconst SAVE_CAR_STARTED = 'SAVE_CAR_STARTED';\nconst SAVE_CAR_SUCCEEDED = 'SAVE_CAR_SUCCEEDED';\nconst SAVE_CAR_FAILED = 'SAVE_CAR_FAILED';\n\nconst reducer = (state, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case FETCH_CARS_STARTED:\n      return { ...state,\n        fetching: true,\n        fetchingError: null\n      };\n\n    case FETCH_CARS_SUCCEEDED:\n      return { ...state,\n        cars: payload.cars,\n        fetching: false\n      };\n\n    case FETCH_CARS_FAILED:\n      return { ...state,\n        fetchingError: payload.error,\n        fetching: false\n      };\n\n    case SAVE_CAR_STARTED:\n      return { ...state,\n        savingError: null,\n        saving: true\n      };\n\n    case SAVE_CAR_SUCCEEDED:\n      const cars = [...(state.cars || [])];\n      const car = payload.car;\n      const index = cars.findIndex(it => it.id === car.id);\n\n      if (index === -1) {\n        cars.splice(0, 0, car);\n      } else {\n        cars[index] = car;\n      }\n\n      return { ...state,\n        cars: cars,\n        saving: false\n      };\n\n    case SAVE_CAR_FAILED:\n      return { ...state,\n        savingError: payload.error,\n        saving: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const CarContext = React.createContext(initialState);\nexport const CarProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    cars,\n    fetching,\n    fetchingError,\n    saving,\n    savingError\n  } = state;\n  useEffect(getCarsEffect, []);\n  useEffect(wsEffect, []);\n  const saveCar = useCallback(saveCarCallback, []);\n  const value = {\n    cars,\n    fetching,\n    fetchingError,\n    saving,\n    savingError,\n    saveCar: saveCar\n  };\n  log('returns');\n  return /*#__PURE__*/React.createElement(CarContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, children);\n\n  function getCarsEffect() {\n    let canceled = false;\n    fetchCars();\n    return () => {\n      canceled = true;\n    };\n\n    async function fetchCars() {\n      try {\n        log('fetchCars started');\n        dispatch({\n          type: FETCH_CARS_STARTED\n        });\n        const cars = await getCars();\n        log('fetchCars succeeded');\n\n        if (!canceled) {\n          dispatch({\n            type: FETCH_CARS_SUCCEEDED,\n            payload: {\n              cars\n            }\n          });\n        }\n      } catch (error) {\n        log('fetchCars failed');\n        dispatch({\n          type: FETCH_CARS_FAILED,\n          payload: {\n            error\n          }\n        });\n      }\n    }\n  }\n\n  async function saveCarCallback(car) {\n    try {\n      log('saveCar started');\n      dispatch({\n        type: SAVE_CAR_STARTED\n      });\n      const savedCar = await (car.id ? updateCar(car) : createCar(car));\n      log('saveCar succeeded');\n      dispatch({\n        type: SAVE_CAR_SUCCEEDED,\n        payload: {\n          car: savedCar\n        }\n      });\n    } catch (error) {\n      log('saveCar failed');\n      dispatch({\n        type: SAVE_CAR_FAILED,\n        payload: {\n          error\n        }\n      });\n    }\n  }\n\n  function wsEffect() {\n    let canceled = false;\n    log('wsEffect - connecting');\n    const closeWebSocket = newWebSocket(message => {\n      if (canceled) {\n        return;\n      }\n\n      const {\n        event,\n        payload: {\n          car\n        }\n      } = message;\n      log(`ws message, car ${event}`);\n\n      if (event === 'created' || event === 'updated') {\n        dispatch({\n          type: SAVE_CAR_SUCCEEDED,\n          payload: {\n            car: car\n          }\n        });\n      }\n    });\n    return () => {\n      log('wsEffect - disconnecting');\n      canceled = true;\n      closeWebSocket();\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/Andrei Gabor/Desktop/UNI/3rd YEAR/Mobile/Labs/cars-app/src/cars/CarProvider.tsx"],"names":["React","useCallback","useEffect","useReducer","getLogger","createCar","getCars","newWebSocket","updateCar","log","initialState","fetching","saving","FETCH_CARS_STARTED","FETCH_CARS_SUCCEEDED","FETCH_CARS_FAILED","SAVE_CAR_STARTED","SAVE_CAR_SUCCEEDED","SAVE_CAR_FAILED","reducer","state","type","payload","fetchingError","cars","error","savingError","car","index","findIndex","it","id","splice","CarContext","createContext","CarProvider","children","dispatch","getCarsEffect","wsEffect","saveCar","saveCarCallback","value","canceled","fetchCars","savedCar","closeWebSocket","message","event"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useReducer} from 'react';\nimport PropTypes from 'prop-types';\nimport {getLogger} from '../core';\nimport {CarProps} from './CarProps';\nimport {createCar, getCars, newWebSocket, updateCar} from './CarApi';\n\nconst log = getLogger('CarProvider');\n\ntype SaveCarFn = (car: CarProps) => Promise<any>;\n\nexport interface CarsState {\n    cars?: CarProps[],\n    fetching: boolean,\n    fetchingError?: Error | null,\n    saving: boolean,\n    savingError?: Error | null,\n    saveCar?: SaveCarFn,\n}\n\ninterface ActionProps {\n    type: string,\n    payload?: any,\n}\n\nconst initialState: CarsState = {\n    fetching: false,\n    saving: false,\n};\n\nconst FETCH_CARS_STARTED = 'FETCH_CARS_STARTED';\nconst FETCH_CARS_SUCCEEDED = 'FETCH_CARS_SUCCEEDED';\nconst FETCH_CARS_FAILED = 'FETCH_CARS_FAILED';\nconst SAVE_CAR_STARTED = 'SAVE_CAR_STARTED';\nconst SAVE_CAR_SUCCEEDED = 'SAVE_CAR_SUCCEEDED';\nconst SAVE_CAR_FAILED = 'SAVE_CAR_FAILED';\n\nconst reducer: (state: CarsState, action: ActionProps) => CarsState =\n    (state, {type, payload}) => {\n        switch (type) {\n            case FETCH_CARS_STARTED:\n                return {...state, fetching: true, fetchingError: null};\n            case FETCH_CARS_SUCCEEDED:\n                return {...state, cars: payload.cars, fetching: false};\n            case FETCH_CARS_FAILED:\n                return {...state, fetchingError: payload.error, fetching: false};\n            case SAVE_CAR_STARTED:\n                return {...state, savingError: null, saving: true};\n            case SAVE_CAR_SUCCEEDED:\n                const cars = [...(state.cars || [])];\n                const car = payload.car;\n                const index = cars.findIndex(it => it.id === car.id);\n                if (index === -1) {\n                    cars.splice(0, 0, car);\n                } else {\n                    cars[index] = car;\n                }\n                return {...state, cars: cars, saving: false};\n            case SAVE_CAR_FAILED:\n                return {...state, savingError: payload.error, saving: false};\n            default:\n                return state;\n        }\n    };\n\nexport const CarContext = React.createContext<CarsState>(initialState);\n\ninterface CarProviderProps {\n    children: PropTypes.ReactNodeLike,\n}\n\nexport const CarProvider: React.FC<CarProviderProps> = ({children}) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const {cars, fetching, fetchingError, saving, savingError} = state;\n    useEffect(getCarsEffect, []);\n    useEffect(wsEffect, []);\n    const saveCar = useCallback<SaveCarFn>(saveCarCallback, []);\n    const value = {cars, fetching, fetchingError, saving, savingError, saveCar: saveCar};\n    log('returns');\n    return (\n        <CarContext.Provider value={value}>\n            {children}\n        </CarContext.Provider>\n    );\n\n    function getCarsEffect() {\n        let canceled = false;\n        fetchCars();\n        return () => {\n            canceled = true;\n        }\n\n        async function fetchCars() {\n            try {\n                log('fetchCars started');\n                dispatch({type: FETCH_CARS_STARTED});\n                const cars = await getCars();\n                log('fetchCars succeeded');\n                if (!canceled) {\n                    dispatch({type: FETCH_CARS_SUCCEEDED, payload: {cars}});\n                }\n            } catch (error) {\n                log('fetchCars failed');\n                dispatch({type: FETCH_CARS_FAILED, payload: {error}});\n            }\n        }\n    }\n\n    async function saveCarCallback(car: CarProps) {\n        try {\n            log('saveCar started');\n            dispatch({type: SAVE_CAR_STARTED});\n            const savedCar = await (car.id ? updateCar(car) : createCar(car));\n            log('saveCar succeeded');\n            dispatch({type: SAVE_CAR_SUCCEEDED, payload: {car: savedCar}});\n        } catch (error) {\n            log('saveCar failed');\n            dispatch({type: SAVE_CAR_FAILED, payload: {error}});\n        }\n    }\n\n    function wsEffect() {\n        let canceled = false;\n        log('wsEffect - connecting');\n        const closeWebSocket = newWebSocket(message => {\n            if (canceled) {\n                return;\n            }\n            const {event, payload: {car}} = message;\n            log(`ws message, car ${event}`);\n            if (event === 'created' || event === 'updated') {\n                dispatch({type: SAVE_CAR_SUCCEEDED, payload: {car: car}});\n            }\n        });\n        return () => {\n            log('wsEffect - disconnecting');\n            canceled = true;\n            closeWebSocket();\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}