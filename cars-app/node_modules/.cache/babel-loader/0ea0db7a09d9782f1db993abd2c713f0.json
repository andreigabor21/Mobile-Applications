{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrei Gabor\\\\Desktop\\\\UNI\\\\3rd YEAR\\\\Mobile\\\\filip\\\\stocks-app\\\\src\\\\cars\\\\StockProvider.tsx\";\nimport React, { useCallback, useEffect, useReducer } from 'react';\nimport { getLogger } from '../core';\nimport { createCar, getCars, newWebSocket, updateCar } from './StockApi';\nconst log = getLogger('StockProvider');\nconst initialState = {\n  fetching: false,\n  saving: false\n};\nconst FETCH_CARS_STARTED = 'FETCH_CARS_STARTED';\nconst FETCH_CARS_SUCCEEDED = 'FETCH_CARS_SUCCEEDED';\nconst FETCH_CARS_FAILED = 'FETCH_CARS_FAILED';\nconst SAVE_CAR_STARTED = 'SAVE_CAR_STARTED';\nconst SAVE_CAR_SUCCEEDED = 'SAVE_CAR_SUCCEEDED';\nconst SAVE_CAR_FAILED = 'SAVE_CAR_FAILED';\n\nconst reducer = (state, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case FETCH_STOCKS_STARTED:\n      return { ...state,\n        fetching: true,\n        fetchingError: null\n      };\n\n    case FETCH_STOCKS_SUCCEEDED:\n      return { ...state,\n        cars: payload.stocks,\n        fetching: false\n      };\n\n    case FETCH_STOCKS_FAILED:\n      return { ...state,\n        fetchingError: payload.error,\n        fetching: false\n      };\n\n    case SAVE_STOCK_STARTED:\n      return { ...state,\n        savingError: null,\n        saving: true\n      };\n\n    case SAVE_STOCK_SUCCEEDED:\n      const stocks = [...(state.cars || [])];\n      const stock = payload.stock;\n      const index = stocks.findIndex(it => it.id === stock.id);\n\n      if (index === -1) {\n        stocks.splice(0, 0, stock);\n      } else {\n        stocks[index] = stock;\n      }\n\n      return { ...state,\n        cars: stocks,\n        saving: false\n      };\n\n    case SAVE_STOCK_FAILED:\n      return { ...state,\n        savingError: payload.error,\n        saving: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const StockContext = React.createContext(initialState);\nexport const StockProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    stocks,\n    fetching,\n    fetchingError,\n    saving,\n    savingError\n  } = state;\n  useEffect(getStocksEffect, []);\n  useEffect(wsEffect, []);\n  const saveStock = useCallback(saveStockCallback, []);\n  const value = {\n    stocks,\n    fetching,\n    fetchingError,\n    saving,\n    savingError,\n    saveStock\n  };\n  log('returns');\n  return /*#__PURE__*/React.createElement(StockContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, children);\n\n  function getStocksEffect() {\n    let canceled = false;\n    fetchStocks();\n    return () => {\n      canceled = true;\n    };\n\n    async function fetchStocks() {\n      try {\n        log('fetchStocks started');\n        dispatch({\n          type: FETCH_STOCKS_STARTED\n        });\n        const stocks = await getCars();\n        log('fetchStocks succeeded');\n\n        if (!canceled) {\n          dispatch({\n            type: FETCH_STOCKS_SUCCEEDED,\n            payload: {\n              stocks\n            }\n          });\n        }\n      } catch (error) {\n        log('fetchStocks failed');\n        dispatch({\n          type: FETCH_STOCKS_FAILED,\n          payload: {\n            error\n          }\n        });\n      }\n    }\n  }\n\n  async function saveStockCallback(stock) {\n    try {\n      log('saveStock started');\n      dispatch({\n        type: SAVE_STOCK_STARTED\n      });\n      const savedStock = await (stock.id ? updateCar(stock) : createCar(stock));\n      log('saveStock succeeded');\n      dispatch({\n        type: SAVE_STOCK_SUCCEEDED,\n        payload: {\n          stock: savedStock\n        }\n      });\n    } catch (error) {\n      log('saveStock failed');\n      dispatch({\n        type: SAVE_STOCK_FAILED,\n        payload: {\n          error\n        }\n      });\n    }\n  }\n\n  function wsEffect() {\n    let canceled = false;\n    log('wsEffect - connecting');\n    const closeWebSocket = newWebSocket(message => {\n      if (canceled) {\n        return;\n      }\n\n      const {\n        event,\n        payload: {\n          car\n        }\n      } = message;\n      log(`ws message, stock ${event}`);\n\n      if (event === 'created' || event === 'updated') {\n        dispatch({\n          type: SAVE_STOCK_SUCCEEDED,\n          payload: {\n            car: car\n          }\n        });\n      }\n    });\n    return () => {\n      log('wsEffect - disconnecting');\n      canceled = true;\n      closeWebSocket();\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/Andrei Gabor/Desktop/UNI/3rd YEAR/Mobile/filip/stocks-app/src/cars/StockProvider.tsx"],"names":["React","useCallback","useEffect","useReducer","getLogger","createCar","getCars","newWebSocket","updateCar","log","initialState","fetching","saving","FETCH_CARS_STARTED","FETCH_CARS_SUCCEEDED","FETCH_CARS_FAILED","SAVE_CAR_STARTED","SAVE_CAR_SUCCEEDED","SAVE_CAR_FAILED","reducer","state","type","payload","FETCH_STOCKS_STARTED","fetchingError","FETCH_STOCKS_SUCCEEDED","cars","stocks","FETCH_STOCKS_FAILED","error","SAVE_STOCK_STARTED","savingError","SAVE_STOCK_SUCCEEDED","stock","index","findIndex","it","id","splice","SAVE_STOCK_FAILED","StockContext","createContext","StockProvider","children","dispatch","getStocksEffect","wsEffect","saveStock","saveStockCallback","value","canceled","fetchStocks","savedStock","closeWebSocket","message","event","car"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useReducer} from 'react';\nimport PropTypes from 'prop-types';\nimport {getLogger} from '../core';\nimport {CarProps} from './CarProps';\nimport {createCar, getCars, newWebSocket, updateCar} from './StockApi';\n\nconst log = getLogger('StockProvider');\n\ntype SaveCarFn = (stock: CarProps) => Promise<any>;\n\nexport interface CarsState {\n    cars?: CarProps[],\n    fetching: boolean,\n    fetchingError?: Error | null,\n    saving: boolean,\n    savingError?: Error | null,\n    saveCar?: SaveCarFn,\n}\n\ninterface ActionProps {\n    type: string,\n    payload?: any,\n}\n\nconst initialState: CarsState = {\n    fetching: false,\n    saving: false,\n};\n\nconst FETCH_CARS_STARTED = 'FETCH_CARS_STARTED';\nconst FETCH_CARS_SUCCEEDED = 'FETCH_CARS_SUCCEEDED';\nconst FETCH_CARS_FAILED = 'FETCH_CARS_FAILED';\nconst SAVE_CAR_STARTED = 'SAVE_CAR_STARTED';\nconst SAVE_CAR_SUCCEEDED = 'SAVE_CAR_SUCCEEDED';\nconst SAVE_CAR_FAILED = 'SAVE_CAR_FAILED';\n\nconst reducer: (state: CarsState, action: ActionProps) => CarsState =\n    (state, {type, payload}) => {\n        switch (type) {\n            case FETCH_STOCKS_STARTED:\n                return {...state, fetching: true, fetchingError: null};\n            case FETCH_STOCKS_SUCCEEDED:\n                return {...state, cars: payload.stocks, fetching: false};\n            case FETCH_STOCKS_FAILED:\n                return {...state, fetchingError: payload.error, fetching: false};\n            case SAVE_STOCK_STARTED:\n                return {...state, savingError: null, saving: true};\n            case SAVE_STOCK_SUCCEEDED:\n                const stocks = [...(state.cars || [])];\n                const stock = payload.stock;\n                const index = stocks.findIndex(it => it.id === stock.id);\n                if (index === -1) {\n                    stocks.splice(0, 0, stock);\n                } else {\n                    stocks[index] = stock;\n                }\n                return {...state, cars: stocks, saving: false};\n            case SAVE_STOCK_FAILED:\n                return {...state, savingError: payload.error, saving: false};\n            default:\n                return state;\n        }\n    };\n\nexport const StockContext = React.createContext<CarsState>(initialState);\n\ninterface StockProviderProps {\n    children: PropTypes.ReactNodeLike,\n}\n\nexport const StockProvider: React.FC<StockProviderProps> = ({children}) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const {stocks, fetching, fetchingError, saving, savingError} = state;\n    useEffect(getStocksEffect, []);\n    useEffect(wsEffect, []);\n    const saveStock = useCallback<SaveCarFn>(saveStockCallback, []);\n    const value = {stocks, fetching, fetchingError, saving, savingError, saveStock};\n    log('returns');\n    return (\n        <StockContext.Provider value={value}>\n            {children}\n        </StockContext.Provider>\n    );\n\n    function getStocksEffect() {\n        let canceled = false;\n        fetchStocks();\n        return () => {\n            canceled = true;\n        }\n\n        async function fetchStocks() {\n            try {\n                log('fetchStocks started');\n                dispatch({type: FETCH_STOCKS_STARTED});\n                const stocks = await getCars();\n                log('fetchStocks succeeded');\n                if (!canceled) {\n                    dispatch({type: FETCH_STOCKS_SUCCEEDED, payload: {stocks}});\n                }\n            } catch (error) {\n                log('fetchStocks failed');\n                dispatch({type: FETCH_STOCKS_FAILED, payload: {error}});\n            }\n        }\n    }\n\n    async function saveStockCallback(stock: CarProps) {\n        try {\n            log('saveStock started');\n            dispatch({type: SAVE_STOCK_STARTED});\n            const savedStock = await (stock.id ? updateCar(stock) : createCar(stock));\n            log('saveStock succeeded');\n            dispatch({type: SAVE_STOCK_SUCCEEDED, payload: {stock: savedStock}});\n        } catch (error) {\n            log('saveStock failed');\n            dispatch({type: SAVE_STOCK_FAILED, payload: {error}});\n        }\n    }\n\n    function wsEffect() {\n        let canceled = false;\n        log('wsEffect - connecting');\n        const closeWebSocket = newWebSocket(message => {\n            if (canceled) {\n                return;\n            }\n            const {event, payload: {car}} = message;\n            log(`ws message, stock ${event}`);\n            if (event === 'created' || event === 'updated') {\n                dispatch({type: SAVE_STOCK_SUCCEEDED, payload: {car: car}});\n            }\n        });\n        return () => {\n            log('wsEffect - disconnecting');\n            canceled = true;\n            closeWebSocket();\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}