{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrei Gabor\\\\Desktop\\\\UNI\\\\3rd YEAR\\\\Mobile\\\\filip\\\\stocks-app\\\\src\\\\todo\\\\StockProvider.tsx\";\nimport React, { useCallback, useEffect, useReducer } from 'react';\nimport { getLogger } from '../core';\nimport { createStock, getStocks, newWebSocket, updateStock } from './StockApi';\nconst log = getLogger('StockProvider');\nconst initialState = {\n  fetching: false,\n  saving: false\n};\nconst FETCH_STOCKS_STARTED = 'FETCH_STOCKS_STARTED';\nconst FETCH_STOCKS_SUCCEEDED = 'FETCH_STOCKS_SUCCEEDED';\nconst FETCH_STOCKS_FAILED = 'FETCH_STOCKS_FAILED';\nconst SAVE_STOCK_STARTED = 'SAVE_STOCK_STARTED';\nconst SAVE_STOCK_SUCCEEDED = 'SAVE_STOCK_SUCCEEDED';\nconst SAVE_STOCK_FAILED = 'SAVE_STOCK_FAILED';\n\nconst reducer = (state, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case FETCH_STOCKS_STARTED:\n      return { ...state,\n        fetching: true,\n        fetchingError: null\n      };\n\n    case FETCH_STOCKS_SUCCEEDED:\n      return { ...state,\n        stocks: payload.stocks,\n        fetching: false\n      };\n\n    case FETCH_STOCKS_FAILED:\n      return { ...state,\n        fetchingError: payload.error,\n        fetching: false\n      };\n\n    case SAVE_STOCK_STARTED:\n      return { ...state,\n        savingError: null,\n        saving: true\n      };\n\n    case SAVE_STOCK_SUCCEEDED:\n      const stocks = [...(state.stocks || [])];\n      const stock = payload.stock;\n      const index = stocks.findIndex(it => it.id === stock.id);\n\n      if (index === -1) {\n        stocks.splice(0, 0, stock);\n      } else {\n        stocks[index] = stock;\n      }\n\n      return { ...state,\n        stocks,\n        saving: false\n      };\n\n    case SAVE_STOCK_FAILED:\n      return { ...state,\n        savingError: payload.error,\n        saving: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const StockContext = React.createContext(initialState);\nexport const StockProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    stocks,\n    fetching,\n    fetchingError,\n    saving,\n    savingError\n  } = state;\n  useEffect(getStocksEffect, []);\n  useEffect(wsEffect, []);\n  const saveStock = useCallback(saveStockCallback, []);\n  const value = {\n    stocks,\n    fetching,\n    fetchingError,\n    saving,\n    savingError,\n    saveStock\n  };\n  log('returns');\n  return /*#__PURE__*/React.createElement(StockContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, children);\n\n  function getStocksEffect() {\n    let canceled = false;\n    fetchStocks();\n    return () => {\n      canceled = true;\n    };\n\n    async function fetchStocks() {\n      try {\n        log('fetchStocks started');\n        dispatch({\n          type: FETCH_STOCKS_STARTED\n        });\n        const stocks = await getStocks();\n        log('fetchStocks succeeded');\n\n        if (!canceled) {\n          dispatch({\n            type: FETCH_STOCKS_SUCCEEDED,\n            payload: {\n              stocks\n            }\n          });\n        }\n      } catch (error) {\n        log('fetchStocks failed');\n        dispatch({\n          type: FETCH_STOCKS_FAILED,\n          payload: {\n            error\n          }\n        });\n      }\n    }\n  }\n\n  async function saveStockCallback(stock) {\n    try {\n      log('saveStock started');\n      dispatch({\n        type: SAVE_STOCK_STARTED\n      });\n      const savedStock = await (stock.id ? updateStock(stock) : createStock(stock));\n      log('saveStock succeeded');\n      dispatch({\n        type: SAVE_STOCK_SUCCEEDED,\n        payload: {\n          stock: savedStock\n        }\n      });\n    } catch (error) {\n      log('saveStock failed');\n      dispatch({\n        type: SAVE_STOCK_FAILED,\n        payload: {\n          error\n        }\n      });\n    }\n  }\n\n  function wsEffect() {\n    let canceled = false;\n    log('wsEffect - connecting');\n    const closeWebSocket = newWebSocket(message => {\n      if (canceled) {\n        return;\n      }\n\n      const {\n        event,\n        payload: {\n          stock\n        }\n      } = message;\n      log(`ws message, stock ${event}`);\n\n      if (event === 'created' || event === 'updated') {\n        dispatch({\n          type: SAVE_STOCK_SUCCEEDED,\n          payload: {\n            stock\n          }\n        });\n      }\n    });\n    return () => {\n      log('wsEffect - disconnecting');\n      canceled = true;\n      closeWebSocket();\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/Andrei Gabor/Desktop/UNI/3rd YEAR/Mobile/filip/stocks-app/src/todo/StockProvider.tsx"],"names":["React","useCallback","useEffect","useReducer","getLogger","createStock","getStocks","newWebSocket","updateStock","log","initialState","fetching","saving","FETCH_STOCKS_STARTED","FETCH_STOCKS_SUCCEEDED","FETCH_STOCKS_FAILED","SAVE_STOCK_STARTED","SAVE_STOCK_SUCCEEDED","SAVE_STOCK_FAILED","reducer","state","type","payload","fetchingError","stocks","error","savingError","stock","index","findIndex","it","id","splice","StockContext","createContext","StockProvider","children","dispatch","getStocksEffect","wsEffect","saveStock","saveStockCallback","value","canceled","fetchStocks","savedStock","closeWebSocket","message","event"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useReducer} from 'react';\nimport PropTypes from 'prop-types';\nimport {getLogger} from '../core';\nimport {StockProps} from './StockProps';\nimport {createStock, getStocks, newWebSocket, updateStock} from './StockApi';\n\nconst log = getLogger('StockProvider');\n\ntype SaveStockFn = (stock: StockProps) => Promise<any>;\n\nexport interface StocksState {\n    stocks?: StockProps[],\n    fetching: boolean,\n    fetchingError?: Error | null,\n    saving: boolean,\n    savingError?: Error | null,\n    saveStock?: SaveStockFn,\n}\n\ninterface ActionProps {\n    type: string,\n    payload?: any,\n}\n\nconst initialState: StocksState = {\n    fetching: false,\n    saving: false,\n};\n\nconst FETCH_STOCKS_STARTED = 'FETCH_STOCKS_STARTED';\nconst FETCH_STOCKS_SUCCEEDED = 'FETCH_STOCKS_SUCCEEDED';\nconst FETCH_STOCKS_FAILED = 'FETCH_STOCKS_FAILED';\nconst SAVE_STOCK_STARTED = 'SAVE_STOCK_STARTED';\nconst SAVE_STOCK_SUCCEEDED = 'SAVE_STOCK_SUCCEEDED';\nconst SAVE_STOCK_FAILED = 'SAVE_STOCK_FAILED';\n\nconst reducer: (state: StocksState, action: ActionProps) => StocksState =\n    (state, {type, payload}) => {\n        switch (type) {\n            case FETCH_STOCKS_STARTED:\n                return {...state, fetching: true, fetchingError: null};\n            case FETCH_STOCKS_SUCCEEDED:\n                return {...state, stocks: payload.stocks, fetching: false};\n            case FETCH_STOCKS_FAILED:\n                return {...state, fetchingError: payload.error, fetching: false};\n            case SAVE_STOCK_STARTED:\n                return {...state, savingError: null, saving: true};\n            case SAVE_STOCK_SUCCEEDED:\n                const stocks = [...(state.stocks || [])];\n                const stock = payload.stock;\n                const index = stocks.findIndex(it => it.id === stock.id);\n                if (index === -1) {\n                    stocks.splice(0, 0, stock);\n                } else {\n                    stocks[index] = stock;\n                }\n                return {...state, stocks, saving: false};\n            case SAVE_STOCK_FAILED:\n                return {...state, savingError: payload.error, saving: false};\n            default:\n                return state;\n        }\n    };\n\nexport const StockContext = React.createContext<StocksState>(initialState);\n\ninterface StockProviderProps {\n    children: PropTypes.ReactNodeLike,\n}\n\nexport const StockProvider: React.FC<StockProviderProps> = ({children}) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const {stocks, fetching, fetchingError, saving, savingError} = state;\n    useEffect(getStocksEffect, []);\n    useEffect(wsEffect, []);\n    const saveStock = useCallback<SaveStockFn>(saveStockCallback, []);\n    const value = {stocks, fetching, fetchingError, saving, savingError, saveStock};\n    log('returns');\n    return (\n        <StockContext.Provider value={value}>\n            {children}\n        </StockContext.Provider>\n    );\n\n    function getStocksEffect() {\n        let canceled = false;\n        fetchStocks();\n        return () => {\n            canceled = true;\n        }\n\n        async function fetchStocks() {\n            try {\n                log('fetchStocks started');\n                dispatch({type: FETCH_STOCKS_STARTED});\n                const stocks = await getStocks();\n                log('fetchStocks succeeded');\n                if (!canceled) {\n                    dispatch({type: FETCH_STOCKS_SUCCEEDED, payload: {stocks}});\n                }\n            } catch (error) {\n                log('fetchStocks failed');\n                dispatch({type: FETCH_STOCKS_FAILED, payload: {error}});\n            }\n        }\n    }\n\n    async function saveStockCallback(stock: StockProps) {\n        try {\n            log('saveStock started');\n            dispatch({type: SAVE_STOCK_STARTED});\n            const savedStock = await (stock.id ? updateStock(stock) : createStock(stock));\n            log('saveStock succeeded');\n            dispatch({type: SAVE_STOCK_SUCCEEDED, payload: {stock: savedStock}});\n        } catch (error) {\n            log('saveStock failed');\n            dispatch({type: SAVE_STOCK_FAILED, payload: {error}});\n        }\n    }\n\n    function wsEffect() {\n        let canceled = false;\n        log('wsEffect - connecting');\n        const closeWebSocket = newWebSocket(message => {\n            if (canceled) {\n                return;\n            }\n            const {event, payload: {stock}} = message;\n            log(`ws message, stock ${event}`);\n            if (event === 'created' || event === 'updated') {\n                dispatch({type: SAVE_STOCK_SUCCEEDED, payload: {stock}});\n            }\n        });\n        return () => {\n            log('wsEffect - disconnecting');\n            canceled = true;\n            closeWebSocket();\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}