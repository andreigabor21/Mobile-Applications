{"ast":null,"code":"import axios from 'axios';\nimport { authConfig, getLogger, withLogs } from '../core';\nimport { Plugins } from '@capacitor/core';\nconst log = getLogger('itemApi');\nconst {\n  Storage\n} = Plugins;\nconst url = 'localhost:3000';\nconst baseUrl = `http://${url}/api/car`;\n\nconst different = (car1, car2) => {\n  if (car1.model === car2.model && car1.price === car2.price && car1.available === car2.available) return false;\n  return true;\n};\n\nexport const syncData = async token => {\n  try {\n    const {\n      keys\n    } = await Storage.keys();\n    var result = axios.get(`${baseUrl}`, authConfig(token));\n    result.then(async result => {\n      keys.forEach(async i => {\n        if (i !== 'token') {\n          const carOnServer = result.data.find(each => each._id === i);\n          const carLocal = await Storage.get({\n            key: i\n          }); // alert('CAR ON SERVER: ' + JSON.stringify(carOnServer));\n          // alert('CAR LOCALLY: ' + carLocal.value!);\n\n          if (carOnServer !== undefined && different(carOnServer, JSON.parse(carLocal.value))) {\n            // actualizare\n            // alert('UPDATE ' + carLocal.value);\n            axios.put(`${baseUrl}/${i}`, JSON.parse(carLocal.value), authConfig(token));\n          } else if (carOnServer === undefined) {\n            // creare\n            // alert('CREATE' + carLocal.value!);\n            axios.post(`${baseUrl}`, JSON.parse(carLocal.value), authConfig(token));\n          }\n        }\n      });\n    }).catch(err => {\n      if (err.response) {\n        console.log('client received an error response (5xx, 4xx)');\n      } else if (err.request) {\n        console.log('client never received a response, or request never left');\n      } else {\n        console.log('anything else');\n      }\n    });\n    return withLogs(result, 'syncCars');\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getCars = token => {\n  try {\n    var result = axios.get(`${baseUrl}`, authConfig(token));\n    result.then(async result => {\n      for (const each of result.data) {\n        await Storage.set({\n          key: each._id,\n          value: JSON.stringify({\n            _id: each._id,\n            model: each.model,\n            price: each.price,\n            available: each.available\n          })\n        });\n      }\n    }).catch(err => {\n      if (err.response) {\n        console.log('client received an error response (5xx, 4xx)');\n      } else if (err.request) {\n        console.log('client never received a response, or request never left');\n      } else {\n        console.log('anything else');\n      }\n    });\n    return withLogs(result, 'getCars');\n  } catch (error) {\n    throw error;\n  }\n};\nexport const createCar = (token, car) => {\n  //return withLogs(axios.post(`${baseUrl}/car`, car, authConfig(token)), 'createCar');\n  var result = axios.post(`${baseUrl}`, car, authConfig(token));\n  result.then(async result => {\n    var one = result.data;\n    await Storage.set({\n      key: one._id,\n      value: JSON.stringify({\n        _id: one._id,\n        model: one.model,\n        price: one.price,\n        available: one.available\n      })\n    });\n  }).catch(err => {\n    if (err.response) {\n      console.log('client received an error response (5xx, 4xx)');\n    } else if (err.request) {\n      alert('client never received a response, or request never left');\n    } else {\n      console.log('anything else');\n    }\n  });\n  return withLogs(result, 'createCar');\n};\nexport const editCar = (token, car) => {\n  //return withLogs(axios.put(`${baseUrl}/car/${car._id}`, car, authConfig(token)), 'updateCar');\n  var result = axios.put(`${baseUrl}/car/${car._id}`, car, authConfig(token));\n  result.then(async result => {\n    var one = result.data;\n    await Storage.set({\n      key: one._id,\n      value: JSON.stringify({\n        _id: one._id,\n        model: one.model,\n        price: one.price,\n        available: one.available\n      })\n    }).catch(err => {\n      if (err.response) {\n        alert('client received an error response (5xx, 4xx)');\n      } else if (err.request) {\n        alert('client never received a response, or request never left');\n      } else {\n        alert('anything else');\n      }\n    });\n  });\n  return withLogs(result, 'updateCar');\n};\nexport const createWebSocket = (token, onMessage) => {\n  const ws = new WebSocket(`ws://${url}`);\n\n  ws.onopen = () => {\n    log('web socket onopen');\n    ws.send(JSON.stringify({\n      type: 'authorization',\n      payload: {\n        token\n      }\n    }));\n  };\n\n  ws.onclose = function (event) {\n    console.log(event);\n    log('web socket onclose');\n  };\n\n  ws.onerror = error => {\n    log('web socket onerror', error);\n    ws.close();\n  };\n\n  ws.onmessage = messageEvent => {\n    log('web socket onmessage');\n    onMessage(JSON.parse(messageEvent.data));\n  };\n\n  return () => {\n    ws.close();\n  };\n};","map":{"version":3,"sources":["C:/Users/Andrei Gabor/Desktop/UNI/3rd YEAR/Mobile/Labs/cars-app/src/cars/CarApi.tsx"],"names":["axios","authConfig","getLogger","withLogs","Plugins","log","Storage","url","baseUrl","different","car1","car2","model","price","available","syncData","token","keys","result","get","then","forEach","i","carOnServer","data","find","each","_id","carLocal","key","undefined","JSON","parse","value","put","post","catch","err","response","console","request","error","getCars","set","stringify","createCar","car","one","alert","editCar","createWebSocket","onMessage","ws","WebSocket","onopen","send","type","payload","onclose","event","onerror","close","onmessage","messageEvent"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { authConfig, getLogger, withLogs } from '../core';\r\nimport { CarProps } from './CarProps';\r\nimport { Plugins} from '@capacitor/core';\r\n\r\nconst log = getLogger('itemApi');\r\nconst { Storage } = Plugins;\r\n\r\nconst url = 'localhost:3000';\r\nconst baseUrl = `http://${url}/api/car`;\r\n\r\n\r\ninterface MessageData {\r\n  type: string;\r\n  payload: CarProps;\r\n}\r\n\r\nconst different = (car1: any, car2: any) => {\r\n    if (car1.model === car2.model && car1.price === car2.price && car1.available === car2.available)\r\n      return false;\r\n    return true;\r\n}\r\n\r\nexport const syncData: (token: string) => Promise<CarProps[]> = async token => {\r\n  try {\r\n    const { keys } = await Storage.keys();\r\n    var result = axios.get(`${baseUrl}`, authConfig(token));\r\n    result.then(async result => {\r\n      keys.forEach(async i => {\r\n        if (i !== 'token') {\r\n          const carOnServer = result.data.find((each: { _id: string; }) => each._id === i);\r\n          const carLocal = await Storage.get({key: i});\r\n\r\n          // alert('CAR ON SERVER: ' + JSON.stringify(carOnServer));\r\n          // alert('CAR LOCALLY: ' + carLocal.value!);\r\n\r\n          if (carOnServer !== undefined && different(carOnServer, JSON.parse(carLocal.value!))) {  // actualizare\r\n            // alert('UPDATE ' + carLocal.value);\r\n            axios.put(`${baseUrl}/${i}`, JSON.parse(carLocal.value!), authConfig(token));\r\n          } else if (carOnServer === undefined){  // creare\r\n            // alert('CREATE' + carLocal.value!);\r\n            axios.post(`${baseUrl}`, JSON.parse(carLocal.value!), authConfig(token));\r\n          }\r\n        }\r\n        })\r\n    }).catch(err => {\r\n      if (err.response) {\r\n        console.log('client received an error response (5xx, 4xx)');\r\n      } else if (err.request) {\r\n        console.log('client never received a response, or request never left');\r\n      } else {\r\n        console.log('anything else');\r\n      }\r\n  })\r\n    return withLogs(result, 'syncCars');\r\n  } catch (error) {\r\n    throw error;\r\n  }    \r\n}\r\n\r\nexport const getCars: (token: string) => Promise<CarProps[]> = token => {  \r\n  try {\r\n    var result = axios.get(`${baseUrl}`, authConfig(token));\r\n    result.then(async result => {\r\n      for (const each of result.data) {\r\n          await Storage.set({\r\n            key: each._id!,\r\n            value: JSON.stringify({\r\n              _id: each._id,\r\n              model: each.model,\r\n              price: each.price,\r\n              available: each.available\r\n            })\r\n          });\r\n      }\r\n    }).catch(err => {\r\n      if (err.response) {\r\n        console.log('client received an error response (5xx, 4xx)');\r\n      } else if (err.request) {\r\n        console.log('client never received a response, or request never left');\r\n      } else {\r\n        console.log('anything else');\r\n      }\r\n  })\r\n    return withLogs(result, 'getCars');\r\n  } catch (error) {\r\n    throw error;\r\n  }    \r\n}\r\n\r\nexport const createCar: (token: string, car: CarProps) => Promise<CarProps[]> = (token, car) => {\r\n    //return withLogs(axios.post(`${baseUrl}/car`, car, authConfig(token)), 'createCar');\r\n    var result = axios.post(`${baseUrl}`, car, authConfig(token));\r\n    result.then(async result => {\r\n      var one = result.data;\r\n      await Storage.set({\r\n        key: one._id!,\r\n        value: JSON.stringify({\r\n          _id: one._id,\r\n          model: one.model,\r\n          price: one.price,\r\n          available: one.available\r\n          })\r\n      });\r\n    }).catch(err => {\r\n      if (err.response) {\r\n        console.log('client received an error response (5xx, 4xx)');\r\n      } else if (err.request) {\r\n        alert('client never received a response, or request never left');\r\n      } else {\r\n        console.log('anything else');\r\n      }\r\n  });\r\n    return withLogs(result, 'createCar');\r\n}\r\n\r\nexport const editCar: (token: string, car: CarProps) => Promise<CarProps[]> = (token, car) => {\r\n    //return withLogs(axios.put(`${baseUrl}/car/${car._id}`, car, authConfig(token)), 'updateCar');\r\n    var result = axios.put(`${baseUrl}/car/${car._id}`, car, authConfig(token));\r\n    result.then(async result => {\r\n      var one = result.data;\r\n      await Storage.set({\r\n        key: one._id!,\r\n        value: JSON.stringify({\r\n          _id: one._id,\r\n          model: one.model,\r\n          price: one.price,\r\n          available: one.available\r\n          })\r\n      }).catch(err => {\r\n        if (err.response) {\r\n          alert('client received an error response (5xx, 4xx)');\r\n        } else if (err.request) {\r\n          alert('client never received a response, or request never left');\r\n        } else {\r\n          alert('anything else');\r\n        }\r\n    })\r\n    });\r\n    return withLogs(result, 'updateCar');\r\n}\r\n\r\nexport const createWebSocket = (token: string, onMessage: (data: MessageData) => void) => {\r\n    const ws = new WebSocket(`ws://${url}`);\r\n    ws.onopen = () => {\r\n      log('web socket onopen');\r\n      ws.send(JSON.stringify({ type: 'authorization', payload: { token } }));\r\n    };\r\n    ws.onclose = function (event) {\r\n      console.log(event);\r\n      log('web socket onclose');\r\n    };\r\n    ws.onerror = error => {\r\n      log('web socket onerror', error);\r\n      ws.close();\r\n    };\r\n    ws.onmessage = messageEvent => {\r\n      log('web socket onmessage');\r\n      onMessage(JSON.parse(messageEvent.data));\r\n    };\r\n    return () => {\r\n      ws.close();\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}